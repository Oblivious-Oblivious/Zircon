#include "syntaxme.h"

object Object implements Object_Model {
    fields {
        implements Object_Data;
    }

    /* Alias for new */
    /* init({}); */

    message "id" |> {
        return self->id;
    }

    message "class" |> {
        return self;
    }

    message "superclass" |> {
        return self->super;
    }

    message "size" |> {
        return self->size;
    }

    message "is a" |> {
        return strcmp(self->class, class->class);
    }

    /* TODO TODO */
    /*
    message "is of" |> {
        while(!(self "equal" class)) {
            if()
            class = class "superclass";
        }
        return true;
    }
    */

    message "responds to" |> {
        return __class_contains_message(message);
    }

    message "new" |> {
        return self "class" "alloc" "init" argv;
    }

    message "alloc" |> {
        return malloc(sizeof(self "class"));
    }

    message "init" |> {
        __generate_id();
        __generate_class_name();
        __generate_superclass(self);
        __generate_defaults(argv);
    }
    
    message "==" |> {
        return self->id == other->id;
    }

    message "!=" |> {
        return self->id != other->id;
    }

    message "equal" {
        /*** TODO USE COMPILER FUNCTION ***/
        return self "is a" other;
        /**********************************/
    }

    message "to string" |> {
        string *__ret_value = new_string("");
        string_add_int(__ret_value, self->id);
        string_add_char(__ret_value, '@');
        string_add_str(__ret_value, self->class);
        return __ret_value;
    }

    defer {
        free(self->class);
        defer();
    }
}