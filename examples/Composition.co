#import "Object"

struct Data {
    int a;
    int b;
} Data;

/* Inherit behaviour */
object Composition implements Object((int): aValue, (int): bValue) {
    fields {
        struct Data data1;
    }

    init {
        self->data1 = (struct Data*)malloc(sizeof(Data));
        self->data1->a = aValue;
        self->data1->b = bValue;
    }

    (void) self |> "set a" |> (int): a |> self->data1->a = a;
    (void) self |> "set b" |> (int): b |> self->data1->b = b;

    (int) self |> "add" |> return self->data1->a + self->data1->b;
    (int) self |> "sub" |> return self->data1->a - self->data1->b;
    (int) self |> "mul" |> return self->data1->a * self->data1->b;
    (int) self |> "div" |> {
        if(self->data1->b != 0)
            return self->data1->a / self->data1->b;
        return -1;
    }
    
    defer {}
}

int main(void) {
    Composition obj = Composition "new" 2, 2;
    printf("%d\n", obj "add"); /* `4` */

    obj "set a" 5;
    obj "set b" 3;

    int res = obj "add";
    printf("%d\n", res); /* `8` */

    return 0;
}
